/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visual;

import image_management.ImageDetectionFunctions;
import image_management.ImageFilters;
import image_management.ImageFilters2;
import image_management.ImageManager;
import image_management.ImageTrans;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.opencv.core.Core;
import org.opencv.core.Mat;

/**
 *
 * @author devel
 */
public class VisualMain extends javax.swing.JFrame {

    //vairables 
    private Mat mat_current;
    private byte[] byte_current;
    private Mat mat_last;
    private byte[] byte_last;
    private Mat mat_last_1, mat_last_2;
    private byte[] byte_last_1, byte_last_2;
    private static int lb_widht;
    private static int lb_height;
    private static int lbo_widht;
    private static int lbo_height;
    int previo_br, previo_ct, previo_gm, previo_averg = 0;
    int actual_br, actual_ct, actual_gm, actual_averg = 0;

    /**
     * Creates new form NewJFrame
     */
    public VisualMain() {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        initComponents();
        jLabel1.setVisible(false);
        jLabel2.setVisible(false);
        lb_widht = lb_img_edit.getWidth();
        lb_height = lb_img_edit.getHeight();
        lbo_widht = lb_img_orig.getWidth();
        lbo_height = lb_img_orig.getHeight();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        lb_img_orig = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        bt_Load_Img = new javax.swing.JButton();
        bt_Reset_Img = new javax.swing.JButton();
        bt_Save_Img = new javax.swing.JButton();
        Controles = new javax.swing.JTabbedPane();
        Corrections = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        slider_bright = new javax.swing.JSlider();
        jPanel4 = new javax.swing.JPanel();
        slider_gamma = new javax.swing.JSlider();
        jPanel3 = new javax.swing.JPanel();
        slider_constrast = new javax.swing.JSlider();
        Check_Neg = new javax.swing.JCheckBox();
        Check_Bin = new javax.swing.JCheckBox();
        Smoothing = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        slider_averging = new javax.swing.JSlider();
        jPanel8 = new javax.swing.JPanel();
        slider_gaussian = new javax.swing.JSlider();
        jPanel10 = new javax.swing.JPanel();
        slider_median = new javax.swing.JSlider();
        Transformations = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        slider_scala = new javax.swing.JSlider();
        jPanel9 = new javax.swing.JPanel();
        slider_rotation = new javax.swing.JSlider();
        b_aplicar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Derivadas = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        b_aplicar_derivada = new javax.swing.JButton();
        cb_derivadas = new javax.swing.JComboBox<>();
        jPanel13 = new javax.swing.JPanel();
        b_aplicar_transformaciones = new javax.swing.JButton();
        cb_transformadas = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        Imagen = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        lb_img_edit = new javax.swing.JLabel();
        b_create_histogram = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lb_img_orig.setBorder(javax.swing.BorderFactory.createTitledBorder("Original"));

        bt_Load_Img.setText("Cargar Imagen");
        bt_Load_Img.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_Load_ImgMouseClicked(evt);
            }
        });

        bt_Reset_Img.setText("Reset");
        bt_Reset_Img.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_Reset_ImgMouseClicked(evt);
            }
        });

        bt_Save_Img.setText("Guardar");
        bt_Save_Img.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_Save_ImgMouseClicked(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));

        slider_bright.setMajorTickSpacing(1);
        slider_bright.setMaximum(10);
        slider_bright.setMinimum(-10);
        slider_bright.setMinorTickSpacing(1);
        slider_bright.setPaintTicks(true);
        slider_bright.setSnapToTicks(true);
        slider_bright.setToolTipText("");
        slider_bright.setValue(0);
        slider_bright.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_brightStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slider_bright, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slider_bright, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Gamma"));

        slider_gamma.setMajorTickSpacing(1);
        slider_gamma.setMaximum(10);
        slider_gamma.setMinorTickSpacing(1);
        slider_gamma.setPaintTicks(true);
        slider_gamma.setSnapToTicks(true);
        slider_gamma.setToolTipText("");
        slider_gamma.setValue(0);
        slider_gamma.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_gammaStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slider_gamma, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(slider_gamma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Contraste"));

        slider_constrast.setMajorTickSpacing(1);
        slider_constrast.setMaximum(10);
        slider_constrast.setMinimum(-10);
        slider_constrast.setMinorTickSpacing(1);
        slider_constrast.setPaintTicks(true);
        slider_constrast.setToolTipText("");
        slider_constrast.setValue(0);
        slider_constrast.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_constrastStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slider_constrast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slider_constrast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        Check_Neg.setText("Negativo");
        Check_Neg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Check_NegMouseClicked(evt);
            }
        });

        Check_Bin.setText("Binario");
        Check_Bin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Check_BinMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout CorrectionsLayout = new javax.swing.GroupLayout(Corrections);
        Corrections.setLayout(CorrectionsLayout);
        CorrectionsLayout.setHorizontalGroup(
            CorrectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CorrectionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CorrectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(CorrectionsLayout.createSequentialGroup()
                        .addGroup(CorrectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(CorrectionsLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(Check_Neg)
                                .addGap(18, 18, 18)
                                .addComponent(Check_Bin, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        CorrectionsLayout.setVerticalGroup(
            CorrectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CorrectionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CorrectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Check_Neg)
                    .addComponent(Check_Bin))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        Controles.addTab("Corrections", Corrections);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Averging"));

        slider_averging.setMajorTickSpacing(1);
        slider_averging.setMaximum(10);
        slider_averging.setMinorTickSpacing(1);
        slider_averging.setPaintTicks(true);
        slider_averging.setSnapToTicks(true);
        slider_averging.setToolTipText("");
        slider_averging.setValue(0);
        slider_averging.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_avergingStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slider_averging, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(slider_averging, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Gaussian"));

        slider_gaussian.setMajorTickSpacing(1);
        slider_gaussian.setMaximum(10);
        slider_gaussian.setMinorTickSpacing(1);
        slider_gaussian.setPaintTicks(true);
        slider_gaussian.setSnapToTicks(true);
        slider_gaussian.setToolTipText("");
        slider_gaussian.setValue(0);
        slider_gaussian.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_gaussianStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slider_gaussian, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(slider_gaussian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Median"));

        slider_median.setMajorTickSpacing(1);
        slider_median.setMaximum(10);
        slider_median.setMinorTickSpacing(1);
        slider_median.setPaintTicks(true);
        slider_median.setSnapToTicks(true);
        slider_median.setToolTipText("");
        slider_median.setValue(0);
        slider_median.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_medianStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slider_median, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(slider_median, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout SmoothingLayout = new javax.swing.GroupLayout(Smoothing);
        Smoothing.setLayout(SmoothingLayout);
        SmoothingLayout.setHorizontalGroup(
            SmoothingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SmoothingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SmoothingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SmoothingLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SmoothingLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(SmoothingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        SmoothingLayout.setVerticalGroup(
            SmoothingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SmoothingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        Controles.addTab("Smooothing", Smoothing);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Escala"));

        slider_scala.setMajorTickSpacing(1);
        slider_scala.setMaximum(10);
        slider_scala.setMinorTickSpacing(1);
        slider_scala.setPaintTicks(true);
        slider_scala.setSnapToTicks(true);
        slider_scala.setToolTipText("");
        slider_scala.setValue(0);
        slider_scala.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_scalaStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slider_scala, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(slider_scala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotation"));

        slider_rotation.setMajorTickSpacing(20);
        slider_rotation.setMaximum(360);
        slider_rotation.setMinorTickSpacing(20);
        slider_rotation.setPaintTicks(true);
        slider_rotation.setSnapToTicks(true);
        slider_rotation.setToolTipText("");
        slider_rotation.setValue(0);
        slider_rotation.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_rotationStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(slider_rotation, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(slider_rotation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        b_aplicar.setText("Aplicar");
        b_aplicar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_aplicarMouseClicked(evt);
            }
        });

        jLabel1.setText("Cambios aplicados!");

        javax.swing.GroupLayout TransformationsLayout = new javax.swing.GroupLayout(Transformations);
        Transformations.setLayout(TransformationsLayout);
        TransformationsLayout.setHorizontalGroup(
            TransformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransformationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TransformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TransformationsLayout.createSequentialGroup()
                        .addGroup(TransformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TransformationsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(TransformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(b_aplicar, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        TransformationsLayout.setVerticalGroup(
            TransformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransformationsLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_aplicar)
                .addContainerGap(109, Short.MAX_VALUE))
        );

        Controles.addTab("Transformations", Transformations);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Derivadas"));

        b_aplicar_derivada.setText("Aplicar");
        b_aplicar_derivada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_aplicar_derivadaMouseClicked(evt);
            }
        });

        cb_derivadas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gradiente", "Sobel" }));
        cb_derivadas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_derivadasItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cb_derivadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(b_aplicar_derivada)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_aplicar_derivada)
                    .addComponent(cb_derivadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Transformadas"));

        b_aplicar_transformaciones.setText("Aplicar");
        b_aplicar_transformaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_aplicar_transformacionesMouseClicked(evt);
            }
        });

        cb_transformadas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Laplace", "Canny", "Fourier" }));
        cb_transformadas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_transformadasItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cb_transformadas, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(b_aplicar_transformaciones)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_transformadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_aplicar_transformaciones))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jLabel2.setText("Cambios aplicados!");

        javax.swing.GroupLayout DerivadasLayout = new javax.swing.GroupLayout(Derivadas);
        Derivadas.setLayout(DerivadasLayout);
        DerivadasLayout.setHorizontalGroup(
            DerivadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DerivadasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DerivadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DerivadasLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        DerivadasLayout.setVerticalGroup(
            DerivadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DerivadasLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(2, 2, 2)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(137, Short.MAX_VALUE))
        );

        Controles.addTab("Otros", Derivadas);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lb_img_edit, javax.swing.GroupLayout.DEFAULT_SIZE, 965, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lb_img_edit, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
        );

        Imagen.addTab("Imagen", jPanel2);

        b_create_histogram.setText("Histograma");
        b_create_histogram.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_create_histogramMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Controles, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lb_img_orig, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(bt_Load_Img, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bt_Reset_Img, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(22, 22, 22)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(bt_Save_Img, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                .addComponent(b_create_histogram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(10, 10, 10)
                .addComponent(Imagen)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Imagen)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lb_img_orig, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bt_Load_Img)
                            .addComponent(b_create_histogram))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bt_Reset_Img)
                            .addComponent(bt_Save_Img))
                        .addGap(11, 11, 11)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Controles, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_Load_ImgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_Load_ImgMouseClicked
        // TODO add your handling code here:
        try {
            mat_current = ImageManager.loadImage();
            byte_current = ImageManager.toBytes(mat_current);
        } catch (Exception e) {
            System.out.println("Error al cargar la imagen");
        } finally {
            setUp(mat_current, byte_current);
        }
    }//GEN-LAST:event_bt_Load_ImgMouseClicked

    private void bt_Reset_ImgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_Reset_ImgMouseClicked
        // TODO add your handling code here:
        restart();
    }//GEN-LAST:event_bt_Reset_ImgMouseClicked

    private void bt_Save_ImgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_Save_ImgMouseClicked
        // TODO add your handling code here:
        try {
            int var = 0;
            JFileChooser chooser = new JFileChooser("D:/Escritorio");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.showDialog(null, null);
            try {
                File outpufile = new File(chooser.getSelectedFile().toString() + "/image_" + var + ".jpg");
                while (outpufile.exists()) {
                    var++;
                    outpufile = new File(chooser.getSelectedFile().toString() + "/image_" + var + ".jpg");
                }
                ImageIO.write(ImageManager.toRenderedImage((BufferedImage) ImageManager.toBufferedImage(mat_current, byte_current)), "jpg", outpufile);
            } catch (IOException ex) {
                System.out.println("Error al guardar la Imagen");
            }
        } catch (HeadlessException ex) {
        }
    }//GEN-LAST:event_bt_Save_ImgMouseClicked

    private void slider_brightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_brightStateChanged
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        byte[] e_byte = byte_current.clone();
        actual_br = slider_bright.getValue();
        try {
            if (actual_br > previo_br) {
                e_mat = ImageFilters.addBrightness(byte_current, mat_current, actual_br);
                e_byte = ImageManager.toBytes(e_mat);
                actual_br = previo_br;
            } else {
                e_mat = ImageFilters.lessBrightness(byte_current, mat_current, actual_br);
                e_byte = ImageManager.toBytes(e_mat);
                actual_br = previo_br;
            }
        } catch (Exception e) {
        } finally {
            changeImg(e_mat, e_byte);
        }
        mat_current = e_mat;
        byte_current = e_byte;
    }//GEN-LAST:event_slider_brightStateChanged

    private void slider_gammaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_gammaStateChanged
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        byte[] e_byte = byte_current.clone();
        actual_gm = slider_gamma.getValue();
        try {
            if (actual_gm > previo_gm) {
                e_mat = ImageFilters.addGamma(byte_current, mat_current, actual_gm);
                e_byte = ImageManager.toBytes(e_mat);
                previo_gm = actual_gm;
            } else {

            }
        } catch (Exception e) {
        } finally {
            changeImg(e_mat, e_byte);
        }
        mat_current = e_mat;
        byte_current = e_byte;
    }//GEN-LAST:event_slider_gammaStateChanged

    private void slider_constrastStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_constrastStateChanged
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        byte[] e_byte = byte_current.clone();
        actual_ct = slider_constrast.getValue();
        try {
            if (actual_ct > previo_ct) {
                e_mat = ImageFilters.addContrast(byte_current, mat_current, actual_ct);
                e_byte = ImageManager.toBytes(e_mat);
                previo_ct = actual_ct;
            } else {
                e_mat = ImageFilters.lessContrast(byte_current, mat_current, actual_ct);
                e_byte = ImageManager.toBytes(e_mat);
                previo_ct = actual_ct;
            }
        } catch (Exception e) {
        } finally {
            changeImg(e_mat, e_byte);
        }
        mat_current = e_mat;
        byte_current = e_byte;
    }//GEN-LAST:event_slider_constrastStateChanged

    private void Check_NegMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Check_NegMouseClicked
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        byte[] e_byte = byte_current.clone();
        if (Check_Neg.isSelected()) {
            mat_last = mat_current.clone();
            byte_last = byte_current.clone();
            try {
                e_mat = ImageFilters.negative(byte_current, mat_current);
                e_byte = ImageManager.toBytes(e_mat);
            } catch (Exception e) {
            } finally {
                changeImg(e_mat, e_byte);
            }
            mat_current = e_mat;
            byte_current = e_byte;
        } else {
            mat_current = mat_last.clone();
            byte_current = byte_last.clone();
            changeImg(mat_current, byte_current);
            mat_last = null;
            byte_last = null;
        }
    }//GEN-LAST:event_Check_NegMouseClicked

    private void Check_BinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Check_BinMouseClicked
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        byte[] e_byte = byte_current.clone();
        if (Check_Bin.isSelected()) {
            mat_last = mat_current.clone();
            byte_last = byte_current.clone();
            try {
                e_mat = ImageFilters.binarization(byte_current, mat_current);
                e_byte = ImageManager.toBytes(e_mat);
            } catch (Exception e) {
            } finally {
                changeImg(e_mat, e_byte);
            }
            mat_current = e_mat;
            byte_current = e_byte;
        } else {
            mat_current = mat_last.clone();
            byte_current = byte_last.clone();
            changeImg(mat_current, byte_current);
            mat_last = null;
            byte_last = null;
        }
    }//GEN-LAST:event_Check_BinMouseClicked

    private void slider_avergingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_avergingStateChanged
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        byte[] e_byte = byte_current.clone();
        try {
            if (slider_averging.getValue() == 0) {
                e_mat = ImageFilters2.avergingFilter(byte_current, mat_current);
                e_byte = ImageManager.toBytes(e_mat);
            } else {
                e_mat = ImageFilters2.avergingFilter(byte_current, mat_current);
                e_byte = ImageManager.toBytes(e_mat);
            }
        } catch (Exception e) {
        } finally {
            changeImg(e_mat, e_byte);
        }
        mat_current = e_mat;
        byte_current = e_byte;
    }//GEN-LAST:event_slider_avergingStateChanged

    private void slider_gaussianStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_gaussianStateChanged
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        byte[] e_byte = byte_current.clone();
        try {
            if (slider_gaussian.getValue() == 0) {
                e_mat = ImageFilters2.gaussianFilter(byte_current, mat_current);
                e_byte = ImageManager.toBytes(e_mat);
            } else {
                e_mat = ImageFilters2.gaussianFilter(byte_current, mat_current);
                e_byte = ImageManager.toBytes(e_mat);
            }
        } catch (Exception e) {
        } finally {
            changeImg(e_mat, e_byte);
        }
        mat_current = e_mat;
        byte_current = e_byte;
    }//GEN-LAST:event_slider_gaussianStateChanged

    private void slider_medianStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_medianStateChanged
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        byte[] e_byte = byte_current.clone();
        try {
            if (slider_median.getValue() == 0) {
                e_mat = ImageFilters2.medianFilter(byte_current, mat_current);
                e_byte = ImageManager.toBytes(e_mat);
            } else {
                e_mat = ImageFilters2.medianFilter(byte_current, mat_current);
                e_byte = ImageManager.toBytes(e_mat);
            }
        } catch (Exception e) {
        } finally {
            changeImg(e_mat, e_byte);
        }
        mat_current = e_mat;
        byte_current = e_byte;
    }//GEN-LAST:event_slider_medianStateChanged

    private void slider_rotationStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_rotationStateChanged
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        byte[] e_byte = byte_current.clone();
        try {
            if (slider_scala.getValue() == 0) {

            } else {
                e_mat = ImageTrans.escalar(e_byte, e_mat, slider_scala.getValue());
                e_byte = ImageManager.toBytes(e_mat);
            }
        } catch (Exception e) {
        } finally {
            changeImg(e_mat, e_byte);
        }
        mat_last_1 = e_mat;
        byte_last_1 = e_byte;
    }//GEN-LAST:event_slider_rotationStateChanged

    private void slider_scalaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_scalaStateChanged
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        byte[] e_byte = byte_current.clone();
        try {
            if (slider_scala.getValue() == 0) {

            } else {
                e_mat = ImageTrans.escalar(e_byte, e_mat, slider_scala.getValue());
                e_byte = ImageManager.toBytes(e_mat);
            }
        } catch (Exception e) {
        } finally {
            changeImg(e_mat, e_byte);
        }
        mat_last_1 = e_mat;
        byte_last_1 = e_byte;
    }//GEN-LAST:event_slider_scalaStateChanged

    private void b_aplicarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_aplicarMouseClicked
        // TODO add your handling code here:
        try {
            if (mat_last_1 != null) {
                mat_current = mat_last_1.clone();
                byte_current = byte_last_1.clone();
                mat_last_1 = null;
                byte_last_1 = null;
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_b_aplicarMouseClicked

    private void b_create_histogramMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_create_histogramMouseClicked
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        try {
            JFrame grafica = new JFrame("Histograma de Imagen");
            grafica.getContentPane().add(ImageManager.createHistogram(e_mat));
            grafica.pack();
            grafica.setVisible(true);
            grafica.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_b_create_histogramMouseClicked

    private void cb_transformadasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_transformadasItemStateChanged
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        byte[] e_byte = byte_current.clone();
        try {
            switch (cb_transformadas.getSelectedIndex()) {
                case 0:
                    e_mat = ImageDetectionFunctions.laplace(e_mat);
                    e_byte = ImageManager.toBytes(e_mat);
                case 1:
                    e_mat = ImageDetectionFunctions.canny(e_mat);
                    e_byte = ImageManager.toBytes(e_mat);
                case 2:
                    e_mat = ImageDetectionFunctions.fourier(e_mat);
                    e_byte = ImageManager.toBytes(e_mat);
            }
        } catch (Exception e) {
        } finally {
            changeImg(e_mat, e_byte);
        }
        mat_last_2 = e_mat;
        byte_last_2 = e_byte;
    }//GEN-LAST:event_cb_transformadasItemStateChanged

    private void cb_derivadasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_derivadasItemStateChanged
        // TODO add your handling code here:
        Mat e_mat = mat_current.clone();
        byte[] e_byte = byte_current.clone();
        try {
            if (cb_derivadas.getSelectedIndex() == 0) {

            } else {
                e_mat = ImageDetectionFunctions.sobel(e_mat);
                e_byte = ImageManager.toBytes(e_mat);
            }
        } catch (Exception e) {
        } finally {
            changeImg(e_mat, e_byte);
        }
        mat_last_2 = e_mat;
        byte_last_2 = e_byte;
    }//GEN-LAST:event_cb_derivadasItemStateChanged

    private void b_aplicar_derivadaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_aplicar_derivadaMouseClicked
        // TODO add your handling code here:
        try {
            if (mat_last_2 != null) {
                mat_current = mat_last_2.clone();
                byte_current = byte_last_2.clone();
                mat_last_2 = null;
                byte_last_2 = null;
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_b_aplicar_derivadaMouseClicked

    private void b_aplicar_transformacionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_aplicar_transformacionesMouseClicked
        // TODO add your handling code here:
        try {
            if (mat_last_2 != null) {
                mat_current = mat_last_2.clone();
                byte_current = byte_last_2.clone();
                mat_last_2 = null;
                byte_last_2 = null;
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_b_aplicar_transformacionesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new VisualMain().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Check_Bin;
    private javax.swing.JCheckBox Check_Neg;
    private javax.swing.JTabbedPane Controles;
    private javax.swing.JPanel Corrections;
    private javax.swing.JPanel Derivadas;
    private javax.swing.JTabbedPane Imagen;
    private javax.swing.JPanel Smoothing;
    private javax.swing.JPanel Transformations;
    private javax.swing.JButton b_aplicar;
    private javax.swing.JButton b_aplicar_derivada;
    private javax.swing.JButton b_aplicar_transformaciones;
    private javax.swing.JButton b_create_histogram;
    private javax.swing.JButton bt_Load_Img;
    private javax.swing.JButton bt_Reset_Img;
    private javax.swing.JButton bt_Save_Img;
    private javax.swing.JComboBox<String> cb_derivadas;
    private javax.swing.JComboBox<String> cb_transformadas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lb_img_edit;
    private javax.swing.JLabel lb_img_orig;
    private javax.swing.JSlider slider_averging;
    private javax.swing.JSlider slider_bright;
    private javax.swing.JSlider slider_constrast;
    private javax.swing.JSlider slider_gamma;
    private javax.swing.JSlider slider_gaussian;
    private javax.swing.JSlider slider_median;
    private javax.swing.JSlider slider_rotation;
    private javax.swing.JSlider slider_scala;
    // End of variables declaration//GEN-END:variables

    private void setUp(Mat m, byte[] b) {
        try {
            lb_img_edit.setSize(lb_widht, lb_height);
            lb_img_orig.setSize(lbo_widht, lbo_height);
            Image img = ImageManager.toBufferedImage(m, b);
            lb_img_edit.setIcon(new ImageIcon(img.getScaledInstance(lb_img_edit.getWidth(), lb_img_edit.getHeight(),
                    Image.SCALE_DEFAULT)));
            lb_img_orig.setIcon(new ImageIcon(img.getScaledInstance(lb_img_orig.getWidth(), lb_img_orig.getHeight(),
                    Image.SCALE_DEFAULT)));
        } catch (Exception e) {
        }
    }

    private void restart() {
        slider_bright.setValue(0);
        slider_gamma.setValue(0);
        slider_constrast.setValue(0);
        slider_averging.setValue(0);
        slider_gaussian.setValue(0);
        slider_median.setValue(0);
        slider_scala.setValue(0);
        slider_rotation.setValue(0);
        try {
            mat_current = ImageManager.loadImageDir();
            byte_current = ImageManager.toBytes(mat_current);
            setUp(mat_current, byte_current);
        } catch (Exception e) {
        }
    }

    private void changeImg(Mat m, byte[] b) {
        try {
            lb_img_edit.setSize(lb_widht, lb_height);
            Image img = ImageManager.toBufferedImage(m, b);
            lb_img_edit.setIcon(new ImageIcon(img.getScaledInstance(lb_img_edit.getWidth(), lb_img_edit.getHeight(),
                    Image.SCALE_DEFAULT)));
        } catch (Exception e) {
        }

    }
}
