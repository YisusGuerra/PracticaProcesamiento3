/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visual;

import java.awt.BorderLayout;
import java.util.ArrayList;
import org.jfree.chart.*;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.statistics.HistogramDataset;
import org.opencv.core.Mat;

/**
 *
 * @author devel
 */
public class Histograma extends javax.swing.JFrame {

    private static Mat m;
    private static double[] B_arr;
    private static double[] G_arr;
    private static double[] R_arr;
    private int[] colores;

    /**
     * Creates new form NewJFrame
     *
     * @param m
     */
    public Histograma(Mat m) {
        this.colores = new int[]{0, 0, 0};
        Histograma.m = m;
        initComponents();
        createHistograma(m);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        control_Panel = new javax.swing.JPanel();
        rb_blue = new javax.swing.JRadioButton();
        rb_green = new javax.swing.JRadioButton();
        rb_red = new javax.swing.JRadioButton();
        ContainerPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rb_blue.setText("Azul");
        rb_blue.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rb_blueItemStateChanged(evt);
            }
        });

        rb_green.setText("Verde");
        rb_green.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb_greenMouseClicked(evt);
            }
        });

        rb_red.setText("Rojo");
        rb_red.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rb_redMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout control_PanelLayout = new javax.swing.GroupLayout(control_Panel);
        control_Panel.setLayout(control_PanelLayout);
        control_PanelLayout.setHorizontalGroup(
            control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(control_PanelLayout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(rb_blue)
                .addGap(63, 63, 63)
                .addComponent(rb_green)
                .addGap(115, 115, 115)
                .addComponent(rb_red)
                .addContainerGap(373, Short.MAX_VALUE))
        );
        control_PanelLayout.setVerticalGroup(
            control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, control_PanelLayout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rb_blue)
                    .addComponent(rb_green)
                    .addComponent(rb_red))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout ContainerPanelLayout = new javax.swing.GroupLayout(ContainerPanel);
        ContainerPanel.setLayout(ContainerPanelLayout);
        ContainerPanelLayout.setHorizontalGroup(
            ContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        ContainerPanelLayout.setVerticalGroup(
            ContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 572, Short.MAX_VALUE)
        );

        ContainerPanel.setLayout(new BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(control_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(control_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rb_blueItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rb_blueItemStateChanged
        // TODO add your handling code here:
        if (rb_blue.isSelected()) {
            this.colores[0] = 1;
        } else {
            this.colores[0] = 0;
        }
        repaint(this.colores);
    }//GEN-LAST:event_rb_blueItemStateChanged

    private void rb_greenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb_greenMouseClicked
        // TODO add your handling code here:
        if (rb_green.isSelected()) {
            this.colores[1] = 1;
        } else {
            this.colores[1] = 0;
        }
        repaint(this.colores);
    }//GEN-LAST:event_rb_greenMouseClicked

    private void rb_redMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rb_redMouseClicked
        // TODO add your handling code here:
        if (rb_red.isSelected()) {
            this.colores[2] = 1;
        } else {
            this.colores[2] = 0;
        }
        repaint(this.colores);
    }//GEN-LAST:event_rb_redMouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ContainerPanel;
    private javax.swing.JPanel control_Panel;
    private javax.swing.JRadioButton rb_blue;
    private javax.swing.JRadioButton rb_green;
    private javax.swing.JRadioButton rb_red;
    // End of variables declaration//GEN-END:variables

    private void repaint(int[] colores) {
        JFreeChart histogram;
        HistogramDataset data = new HistogramDataset();
        if (colores[0] == 1) {
            data.addSeries("blue", B_arr, B_arr.length, 0, 255);
        }
        if (colores[1] == 1) {
            data.addSeries("green", G_arr, G_arr.length, 0, 255);
        }
        if (colores[2] == 1) {
            data.addSeries("red", R_arr, R_arr.length, 0, 255);
        }
        histogram = ChartFactory.createHistogram("Histograma", "Pixeles", "Cantidad", data, PlotOrientation.VERTICAL, true, true, true);
        ChartPanel chartPanel = new ChartPanel(histogram);
        chartPanel.setDomainZoomable(true);
        ContainerPanel.removeAll();
        ContainerPanel.add(chartPanel);
        this.repaint();
        this.revalidate();
        this.setSize(900, 700);
    }

    private void createHistograma(Mat m) {
        JFreeChart histogram;
        HistogramDataset data = new HistogramDataset();
        double[] newSpec;
        ArrayList<Double> B = new ArrayList<>(),
                G = new ArrayList<>(),
                R = new ArrayList<>();
        for (int i = 0; i < m.rows(); i++) {
            for (int j = 0; j < m.cols(); j++) {
                newSpec = m.get(i, j);
                B.add(newSpec[0]);
                G.add(newSpec[1]);
                R.add(newSpec[2]);
            }
        }
        B_arr = B.stream().mapToDouble(Double::doubleValue).toArray();
        G_arr = G.stream().mapToDouble(Double::doubleValue).toArray();
        R_arr = R.stream().mapToDouble(Double::doubleValue).toArray();
        data.addSeries("blue", B_arr, B_arr.length, 0, 255);
        data.addSeries("green", G_arr, G_arr.length, 0, 255);
        data.addSeries("red", R_arr, R_arr.length, 0, 255);
        histogram = ChartFactory.createHistogram("Histograma", "Pixeles", "Cantidad", data, PlotOrientation.VERTICAL, true, true, true);
        ChartPanel chartPanel = new ChartPanel(histogram);
        chartPanel.setDomainZoomable(true);
        ContainerPanel.add(chartPanel);
        this.setSize(900, 700);
    }
}
